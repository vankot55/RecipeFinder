import { useState } from "react";
import { ArrowLeft, CheckCircle, Circle } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import Sidebar from "@/components/seller-hub/sidebar";
import TopBar from "@/components/seller-hub/top-bar";

interface Task {
  id: string;
  title: string;
  action: string;
  completed: boolean;
}

interface Module {
  id: string;
  title: string;
  description: string;
  tasks: Task[];
}

export default function LearningPlan() {
  const [modules, setModules] = useState<Module[]>([
    {
      id: "module-1",
      title: "–ú–æ–¥—É–ª—å 1: –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó",
      description: "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤—ñ–π –º–∞–≥–∞–∑–∏–Ω —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ –π–æ–≥–æ –¥–æ —Ä–æ–±–æ—Ç–∏",
      tasks: [
        { id: "task-1-1", title: "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫—ñ–≤ (–ù–ü, –£–ü —Ç–∞ —ñ–Ω.)", action: "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", completed: true },
        { id: "task-1-2", title: "–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –±–µ–∑–ø–µ—á–Ω—ñ –æ–ø–ª–∞—Ç–∏ Rozetka Pay", action: "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏", completed: true },
        { id: "task-1-3", title: "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ Seller", action: "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", completed: false },
        { id: "task-1-4", title: "–ö–µ—Ä—É–≤–∞—Ç–∏ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é —Ç–æ–≤–∞—Ä—ñ–≤", action: "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ", completed: false }
      ]
    },
    {
      id: "module-2", 
      title: "–ú–æ–¥—É–ª—å 2: –†–µ–∫–ª–∞–º–∞, –ü—Ä–æ–¥–∞–∂—ñ, –ö–æ–Ω—Ç–µ–Ω—Ç",
      description: "–ó–∞–ª—É—á—ñ—Ç—å –ø–µ—Ä—à–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤ —Ç–∞ –Ω–∞–≤—á—ñ—Ç—å—Å—è —è–∫—ñ—Å–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
      tasks: [
        { id: "task-2-1", title: "–í–∏–≤—á–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –†–µ–∫–ª–∞–º–∏", action: "–ß–∏—Ç–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é", completed: true },
        { id: "task-2-2", title: "–û—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –Ω–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ –ø–∞–∫—É–≤–∞–Ω–Ω—è–º", action: "–í–∏–º–æ–≥–∏ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫—ñ–≤", completed: true },
        { id: "task-2-3", title: "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –ø–æ–∫—É–ø—Ü—è–º–∏", action: "–°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω–∏", completed: false },
        { id: "task-2-4", title: "–°—Ç–≤–æ—Ä–∏—Ç–∏ —è–∫—ñ—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤", action: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ä–∞–¥–∏", completed: false }
      ]
    },
    {
      id: "module-3",
      title: "–ú–æ–¥—É–ª—å 3: –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è",
      description: "–†–æ–∑–≤–∏–≤–∞–π—Ç–µ —Å–≤—ñ–π –±—ñ–∑–Ω–µ—Å —Ç–∞ –∑–±—ñ–ª—å—à—É–π—Ç–µ –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ Rozetka",
      tasks: [
        { id: "task-3-1", title: "–†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –ø–µ—Ä–µ–≤–∞–≥–∏ –§—É–ª—Ñ—ñ–ª–º–µ–Ω—Ç—É (FBR)", action: "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ FBR", completed: false },
        { id: "task-3-2", title: "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É", action: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É", completed: false },
        { id: "task-3-3", title: "–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç (Rich-–∫–æ–Ω—Ç–µ–Ω—Ç, –≤—ñ–¥–µ–æ–æ–≥–ª—è–¥–∏)", action: "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é", completed: false },
        { id: "task-3-4", title: "–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ —É—á–∞—Å—Ç—ñ –≤ –ø—Ä–æ–º–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö", action: "–ö–∞–ª–µ–Ω–¥–∞—Ä –∞–∫—Ü—ñ–π", completed: false }
      ]
    }
  ]);

  const totalTasks = modules.reduce((total, module) => total + module.tasks.length, 0);
  const completedTasks = modules.reduce((total, module) => 
    total + module.tasks.filter(task => task.completed).length, 0
  );
  const progressPercentage = Math.round((completedTasks / totalTasks) * 100);

  const toggleTask = (moduleId: string, taskId: string) => {
    setModules(prevModules => 
      prevModules.map(module => 
        module.id === moduleId 
          ? {
              ...module,
              tasks: module.tasks.map(task => 
                task.id === taskId 
                  ? { ...task, completed: !task.completed }
                  : task
              )
            }
          : module
      )
    );
  };

  const getModuleProgress = (module: Module) => {
    const completed = module.tasks.filter(task => task.completed).length;
    return Math.round((completed / module.tasks.length) * 100);
  };

  return (
    <div className="flex min-h-screen">
      <Sidebar />
      <main className="flex-1 bg-background">
        <TopBar />
        <div className="p-6">
          {/* Header */}
          <div className="mb-6">
            <button 
              onClick={() => window.history.back()}
              className="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors duration-200 mb-4"
              data-testid="back-to-hub"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>–ù–∞–∑–∞–¥ –¥–æ Seller Hub</span>
            </button>
            
            <h1 className="text-2xl font-semibold text-foreground mb-2">
              –ù–∞–≤—á–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω: –°—Ç–∞—Ä—Ç –Ω–∞ Rozetka: –≤—ñ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–æ –ø–µ—Ä—à–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É
            </h1>
            
            {/* Overall Progress */}
            <div className="bg-white rounded-lg border border-border p-6 mb-8">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-medium text-foreground">–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å</h2>
                <span className="text-sm text-muted-foreground" data-testid="progress-text">
                  –í–∏–∫–æ–Ω–∞–Ω–æ {completedTasks} –∑ {totalTasks} –∑–∞–≤–¥–∞–Ω—å
                </span>
              </div>
              <Progress value={progressPercentage} className="h-3" />
              <div className="text-right mt-2">
                <span className="text-sm font-medium text-foreground">{progressPercentage}%</span>
              </div>
            </div>
          </div>

          {/* Modules */}
          <div className="space-y-8">
            {modules.map((module) => {
              const moduleProgress = getModuleProgress(module);
              return (
                <div key={module.id} className="bg-white rounded-lg border border-border p-6">
                  <div className="mb-4">
                    <div className="flex justify-between items-start mb-2">
                      <h3 className="text-lg font-semibold text-foreground">{module.title}</h3>
                      <span className="text-sm text-muted-foreground">{moduleProgress}%</span>
                    </div>
                    <p className="text-muted-foreground text-sm mb-4">{module.description}</p>
                    <Progress value={moduleProgress} className="h-2" />
                  </div>

                  <div className="space-y-3">
                    {module.tasks.map((task) => (
                      <div 
                        key={task.id}
                        className={`flex items-center justify-between p-4 border border-border rounded-lg transition-all duration-200 ${
                          task.completed 
                            ? 'bg-muted/50 opacity-75' 
                            : 'bg-white hover:bg-muted/30'
                        }`}
                        data-testid={`task-${task.id}`}
                      >
                        <div className="flex items-center space-x-3 flex-1">
                          <button
                            onClick={() => toggleTask(module.id, task.id)}
                            className="flex-shrink-0"
                            data-testid={`checkbox-${task.id}`}
                          >
                            {task.completed ? (
                              <CheckCircle className="w-5 h-5 text-[#00A046]" />
                            ) : (
                              <Circle className="w-5 h-5 text-muted-foreground hover:text-foreground" />
                            )}
                          </button>
                          <span 
                            className={`font-medium ${
                              task.completed 
                                ? 'text-muted-foreground line-through' 
                                : 'text-foreground'
                            }`}
                          >
                            {task.title}
                          </span>
                        </div>
                        <button 
                          className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 ${
                            task.completed
                              ? 'bg-muted text-muted-foreground cursor-not-allowed'
                              : 'bg-[#00A046] hover:bg-[#00864a] text-white'
                          }`}
                          disabled={task.completed}
                          data-testid={`action-${task.id}`}
                        >
                          {task.action}
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>

          {/* Completion Message */}
          {completedTasks === totalTasks && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center mt-8">
              <h3 className="text-lg font-semibold text-green-800 mb-2">üéâ –í—ñ—Ç–∞—î–º–æ –∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º –∫—É—Ä—Å—É!</h3>
              <p className="text-green-700 mb-4">
                –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å—É "–°—Ç–∞—Ä—Ç –Ω–∞ Rozetka". 
                –¢–µ–ø–µ—Ä –≤–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–¥–∞–∂—ñ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ.
              </p>
              <button className="bg-[#00A046] hover:bg-[#00864a] text-white px-6 py-3 rounded-lg font-medium">
                –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
              </button>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}